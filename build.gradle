buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '5.2.0'
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "maven"
apply plugin: "java"
apply plugin: "idea"

version = "${minecraft_version}-" + getVersion()
group = "${group}"
archivesBaseName = "${mod_name}"

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name = "forge"
        url = "http://files.minecraftforge.net/maven"
    }
    maven {
        name = "The Loader"
        url = "https://maven.blamejared.com"
    }
    maven {
        name = "Titanium"
        url = "https://cdn.hrzn.studio/maven/"
    }
    maven {
        name = "Nature's Aura"
        url = "https://maven.ellpeck.de"
    }
    maven {
        name = "Registrate"
        url = "http://maven.tterrag.com/"
    }
    maven {
        name = "JEI"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "FTB Gui"
        url = "https://maven.latmod.com/"
    }
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

sourceSets {
    main {
        resources {
            include '**/**'
            exclude '**/*.bbmodel'
            srcDirs += "$rootDir/src/generated/resources"
            exclude '.cache'
        }
    }
}

def version_properties = [
        "version"          : version,
        "mc_version"       : minecraft_version,
        "forge_version"    : min_forge_version,
        "loader_version"   : loader_version,
        "transport_version": min_transport_version
]

processResources {
    outputs.upToDateWhen { false }
    from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand version_properties
    }
    into "$buildDir/resources/main/"
}

minecraft {
    mappings channel: "snapshot", version: "${mappings_version}"

    runs {
        client {
            workingDirectory project.file("run")

            properties 'mixin.env.disableRefMap': 'true'

            mods {
                transport_synergy {
                    source(sourceSets.main)
                }
            }
        }

        server {
            workingDirectory project.file("run")

            properties 'mixin.env.disableRefMap': 'true'

            mods {
                transport_synergy {
                    source(sourceSets.main)
                }
            }
        }

        data {
            workingDirectory project.file("run")

            environment 'target', 'fmluserdevdata'

            properties 'fml.earlyprogresswindow': 'false'
            properties 'mixin.env.disableRefMap': 'true'

            args '--all', '--output', file('src/generated/resources/'),
                    '--reports',
                    '--mod', 'transport_synergy', '--existing', sourceSets.main.resources.srcDirs[0]

            mods {
                transport_synergy {
                    source(sourceSets.main)
                }
            }
        }
    }
}

configurations {
    shade
}

shadowJar {
    configurations = [project.configurations.shade]
    relocate 'com.tterrag.registrate', 'xyz.brassgoggledcoders.transportsynergy.repack.registrate'
    relocate 'xyz.brassgoggledcoder.transport.registrate', 'xyz.brassgoggledcoders.transportsynergy.repack.transport'
    classifier ''
}

reobf {
    shadowJar {}
}

build.dependsOn shadowJar
build.dependsOn reobfShadowJar

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compile fg.deobf(project.dependencies.create("com.hrznstudio:titanium:${minecraft_version}-${titanium_version}") {
        transitive = false
    })

    def registrate = "com.tterrag.registrate:Registrate:MC1.16.2-${registrate_version}"
    implementation fg.deobf(registrate)
    shade registrate

    compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    compile fg.deobf("blusunrize.immersiveengineering:ImmersiveEngineering:${minecraft_version}-${immersive_engineering_version}")

    compile fg.deobf("com.blamejared.crafttweaker:CraftTweaker-${minecraft_version}:${crafttweaker_version}")

    compileOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${minecraft_version}:${jei_version}")

    compile fg.deobf("vazkii.autoreglib:AutoRegLib:${auto_reg_lib_version}")
    compile fg.deobf("vazkii.quark:Quark:${quark_version}")

    compileOnly fg.deobf("de.ellpeck.naturesaura:NaturesAura:${natures_aura_version}:api")
    runtimeOnly fg.deobf("de.ellpeck.naturesaura:NaturesAura:${natures_aura_version}")

    def transportRegistrate = "xyz.brassgoggledcoders:Transport:${transport_version}:registrate"
    implementation fg.deobf(transportRegistrate)
    shade transportRegistrate

    compile fg.deobf("xyz.brassgoggledcoders:Transport:${transport_version}:nodep")

    testImplementation('org.junit.jupiter:junit-jupiter:5.6.1')
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = "javadoc"
    from javadoc.destinationDir
}

jar {
    classifier = "nodep"
    manifest {
        attributes([
                "Specification-Title"     : "${title}",
                "Specification-Vendor"    : "${team}",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "${team}",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

artifacts {
    archives javadocJar
    archives srcJar
    archives jar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven")))
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

String getVersion() {
    String version = "${mod_version}"
    String branch = project.hasProperty("branch") ? project.branch : ""

    if (branch != "") {
        version += "-" + branch

        String buildNumber = getBuildNumber()
        if (buildNumber != "") {
            version += "." + buildNumber
        }
    }

    return version
}

static String getBuildNumber() {
    String buildNumber = System.getenv("BUILD_NUMBER") != null ? System.getenv("BUILD_NUMBER") : ""
    if (buildNumber == "") {
        buildNumber = System.getenv("bamboo_buildNumber") != null ? System.getenv("bamboo_buildNumber") : ""
    }
    return buildNumber
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xmaxerrs" << "10000"
    }
}
